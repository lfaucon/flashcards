{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["importance","date","count","x","Date","Math","pow","Number","isNaN","Controls","_ref","turned","turn","next","answer","cards","cardIndex","length","react_default","a","createElement","id","className","onClick","style","backgroundColor","FlashCard","_ref2","card","_ref3","front","back","_ref4","Object","slicedToArray","_ref5","lastSeenAt","getSeconds","_ref6","f","b","MemoryBattery","_ref7","memoryScore","reduce","_max","c","idx","max","icon","Header","_ref8","openConfig","App_MemoryBattery","ConfigPanel","_ref9","toggleConfig","setCards","_useState","useState","_useState2","setFront","_useState3","_useState4","setBack","value","onChange","e","target","marginTop","newCard","newCards","concat","toConsumableArray","localStorage","setItem","JSON","stringify","App","state","configOpen","_this","setState","s","_cards$_max","da","co","setTimeout","undefined","handleRecall","wasCorrect","_this$state","config","getItem","parse","_unused","getCards","floor","random","this","_this2","_this$state2","App_Header","App_FlashCard","App_Controls","assign","App_ConfigPanel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e634ee0.chunk.js","sourcesContent":["import React, { Component, useState } from \"react\";\nimport \"./App.css\";\n\nconst importance = (date, count) => {\n  const x = (new Date() - new Date(date)) / 2 ** count;\n  return Number.isNaN(x) ? 1e6 : x;\n};\n\nconst Controls = ({ turned, turn, next, answer, cards, cardIndex }) => {\n  if (!cards || cards.length === 0) {\n    return (\n      <div id=\"controls\">\n        <button className=\"button\">You have no card yet</button>\n      </div>\n    );\n  }\n  return (\n    <div id=\"controls\">\n      {!turned && (\n        <button className=\"button\" onClick={turn}>\n          SHOW\n        </button>\n      )}\n      {turned && (\n        <button\n          className=\"button\"\n          style={{ backgroundColor: \"green\" }}\n          onClick={() => answer(true) || next()}\n        >\n          I KNEW\n        </button>\n      )}\n      {turned && (\n        <button\n          className=\"button\"\n          style={{ backgroundColor: \"red\" }}\n          onClick={() => answer(false) || next()}\n        >\n          I FORGOT\n        </button>\n      )}\n    </div>\n  );\n};\n\nconst FlashCard = ({ turned, card }) => {\n  const [front, back] = (card && [card.front, card.back]) || [\"\", \"\"];\n  const reverse = card && new Date(card.lastSeenAt).getSeconds() % 2 > 0.5;\n  const [f, b] = reverse ? [front, back] : [back, front];\n  return (\n    <div id=\"flashcard\">\n      <div className={turned ? \"showFront\" : \"showBack\"}>\n        <div className=\"front\">\n          <span>{f}</span>\n        </div>\n        <div className=\"back\">\n          <span>{b}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst MemoryBattery = ({ cards }) => {\n  const memoryScore = cards\n    ? cards.reduce(\n        (_max, c, idx) => Math.max(importance(c.lastSeenAt, c.count), _max),\n        0\n      )\n    : 0;\n  const THRESHOLD = 12 * 3600 * 1000; // 12 hours threshold\n  var icon = \"fas fa-battery-full\";\n  if (memoryScore > 1 * THRESHOLD) icon = \"fas fa-battery-three-quarters\";\n  if (memoryScore > 2 * THRESHOLD) icon = \"fas fa-battery-half\";\n  if (memoryScore > 3 * THRESHOLD) icon = \"fas fa-battery-quarter\";\n  if (memoryScore > 4 * THRESHOLD) icon = \"fas fa-battery-empty\";\n  return <i className={icon} />;\n};\n\nconst Header = ({ openConfig, cards }) => {\n  return (\n    <div id=\"header\">\n      <span>Flashcards</span>\n      <MemoryBattery cards={cards} />\n      <i className=\"fas fa-plus\" onClick={openConfig} />\n    </div>\n  );\n};\nconst getCards = config => {\n  try {\n    const cards = localStorage.getItem(\"lpfaucon.flashcards.cards\");\n    return cards ? JSON.parse(cards) : [];\n  } catch {\n    return [];\n  }\n};\n\nconst ConfigPanel = ({ toggleConfig, cards, setCards }) => {\n  const [front, setFront] = useState(\"\");\n  const [back, setBack] = useState(\"\");\n\n  const addCard = () => {\n    if (front === \"\" || back === \"\") return;\n    const newCard = { front, back, lastSeenAt: new Date(), count: 1 };\n    const newCards = [...cards, newCard];\n    localStorage.setItem(\"lpfaucon.flashcards.cards\", JSON.stringify(newCards));\n    toggleConfig();\n    setCards(newCards);\n  };\n\n  return (\n    <div id=\"config\">\n      <span>Front:</span>\n      <textarea value={front} onChange={e => setFront(e.target.value)} />\n      <span>Back:</span>\n      <textarea value={back} onChange={e => setBack(e.target.value)} />\n      <button\n        className=\"button\"\n        style={{ marginTop: \"16px\" }}\n        onClick={addCard}\n      >\n        ADD\n      </button>\n    </div>\n  );\n};\n\nclass App extends Component {\n  state = {\n    turned: false,\n    configOpen: false\n  };\n\n  componentDidMount() {\n    const cards = getCards();\n    const cardIndex = Math.floor(Math.random() * cards.length);\n    this.setState({ cards, cardIndex });\n  }\n\n  next = () =>\n    this.setState(s => {\n      const { cards } = s;\n      const cardIndex = cards.reduce((_max, c, idx) => {\n        const { lastSeenAt, count } = c;\n        const { lastSeenAt: da, count: co } = cards[_max];\n        const better = importance(lastSeenAt, count) > importance(da, co);\n        return better ? idx : _max;\n      }, 0);\n      setTimeout(() => this.setState({ cardIndex }), 500);\n      return {\n        turned: false,\n        cardIndex: undefined\n      };\n    });\n\n  handleRecall = wasCorrect => {\n    const { cards, cardIndex } = this.state;\n    const newCards = [...cards];\n    if (!newCards[cardIndex]) return;\n    newCards[cardIndex].lastSeenAt = new Date();\n    if (wasCorrect) {\n      newCards[cardIndex].count = (newCards[cardIndex].count || 1) + 1;\n    } else {\n      newCards[cardIndex].count = 1;\n    }\n    localStorage.setItem(\"lpfaucon.flashcards.cards\", JSON.stringify(newCards));\n    this.setState({ cards: newCards });\n  };\n\n  turn = () => this.setState(s => ({ turned: !s.turned }));\n  toggleConfig = () => this.setState(s => ({ configOpen: !s.configOpen }));\n\n  render() {\n    const { configOpen, cards, cardIndex, turned } = this.state;\n    return (\n      <div className=\"App\">\n        <Header openConfig={this.toggleConfig} cards={cards} />\n        {!configOpen && (\n          <FlashCard turned={turned} card={cards && cards[cardIndex]} />\n        )}\n        {!configOpen && (\n          <Controls\n            {...this.state}\n            turn={this.turn}\n            next={this.next}\n            answer={this.handleRecall}\n          />\n        )}\n        {configOpen && (\n          <ConfigPanel\n            {...this.state}\n            toggleConfig={this.toggleConfig}\n            setCards={c => this.setState({ cards: c })}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}