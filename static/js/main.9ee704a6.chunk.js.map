{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["importance","date","count","x","Date","Math","pow","Number","isNaN","Controls","_ref","turned","turn","next","answer","cards","cardIndex","length","undefined","react_default","a","createElement","id","className","onClick","style","backgroundColor","FlashCard","_ref2","card","toggleConfig","_ref3","front","back","_ref4","Object","slicedToArray","_ref5","_ref6","f","b","App_MemoryBattery","cl","latex_default","MemoryBattery","_ref7","memoryScore","lastSeenAt","icon","Header","_ref8","openConfig","setCardIndex","ConfigPanel","_ref9","setCards","_useState","useState","_useState2","setFront","_useState3","_useState4","setBack","mem","keys","localStorage","map","k","reduce","App_Instructions","value","onChange","e","target","marginTop","newCards","newCard","concat","toConsumableArray","setItem","JSON","stringify","toFixed","Instructions","App","_useState5","config","getItem","parse","_unused","getCards","_useState6","_useState7","_useState8","_useState9","_useState10","setTurned","_useState11","_useState12","configOpen","setConfigOpen","App_Header","App_FlashCard","App_Controls","withDelay","newCardIndex","_max","c","idx","_cards$_max","da","co","setTimeout","wasCorrect","_newCards$cardIndex","im","increment","App_ConfigPanel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ee704a6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Latex from \"react-latex\";\nimport \"./App.css\";\n\nconst THRESHOLD = 3 * 3600 * 1000; // 12 hours threshold\n\nconst importance = (date, count) => {\n  const x = (new Date() - new Date(date)) / 2 ** count;\n  return Number.isNaN(x) ? 1e6 : x;\n};\n\nconst Controls = ({ turned, turn, next, answer, cards, cardIndex }) => {\n  if (!cards || cards.length === 0) return null;\n  if (cardIndex === undefined) next(false);\n  return (\n    <div id=\"controls\">\n      {!turned && (\n        <button className=\"button\" onClick={turn}>\n          SHOW\n        </button>\n      )}\n      {turned && (\n        <button\n          className=\"button\"\n          style={{ backgroundColor: \"green\" }}\n          onClick={() => answer(true) || next(true)}\n        >\n          I KNOW\n        </button>\n      )}\n      {turned && (\n        <button\n          className=\"button\"\n          style={{ backgroundColor: \"red\" }}\n          onClick={() => answer(false) || next(true)}\n        >\n          I FORGOT\n        </button>\n      )}\n    </div>\n  );\n};\n\nconst FlashCard = ({ turned, turn, card, toggleConfig }) => {\n  const [front, back] = (card && [card.front, card.back]) || [\"\", \"\"];\n  //const reverse = card && new Date(card.lastSeenAt).getSeconds() % 2 > 0.5;\n  const reverse = false;\n  const [f, b] = reverse ? [back, front] : [front, back];\n  return (\n    <div id=\"flashcard\" onClick={turn}>\n      <div className={turned ? \"showFront\" : \"showBack\"}>\n        <div className=\"front\">\n          <i className=\"edit-button fas fa-pencil-alt\" onClick={toggleConfig} />\n          <MemoryBattery cl=\"mem-battery\" card={card} />\n          <Latex>{f}</Latex>\n        </div>\n        <div className=\"back\">\n          <i className=\"edit-button fas fa-pencil-alt\" onClick={toggleConfig} />\n          <MemoryBattery cl=\"mem-battery\" card={card} />\n          <Latex>{b}</Latex>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst MemoryBattery = ({ card, cl }) => {\n  if (!card) return null;\n  const memoryScore = importance(card.lastSeenAt, card.count);\n  var icon = \"fas fa-battery-full\";\n  if (memoryScore > 1 * THRESHOLD) icon = \"fas fa-battery-three-quarters\";\n  if (memoryScore > 2 * THRESHOLD) icon = \"fas fa-battery-half\";\n  if (memoryScore > 3 * THRESHOLD) icon = \"fas fa-battery-quarter\";\n  if (memoryScore > 4 * THRESHOLD) icon = \"fas fa-battery-empty\";\n  return <i className={cl + \" \" + icon} />;\n};\n\nconst Header = ({ openConfig, cards, setCardIndex }) => {\n  const toggleAdd = () => {\n    if (cards.length > 0) {\n      openConfig();\n      setCardIndex(undefined);\n    }\n  };\n  return (\n    <div id=\"header\">\n      <span>Flashcards</span>\n      <i className=\"fas fa-plus\" onClick={toggleAdd} />\n    </div>\n  );\n};\n\nconst getCards = config => {\n  try {\n    const cards = localStorage.getItem(\"lpfaucon.flashcards.cards\");\n    return cards ? JSON.parse(cards) : [];\n  } catch {\n    return [];\n  }\n};\n\nconst ConfigPanel = ({\n  toggleConfig,\n  setCardIndex,\n  cardIndex,\n  cards,\n  setCards\n}) => {\n  const f = cardIndex === undefined ? \"\" : cards[cardIndex].front;\n  const b = cardIndex === undefined ? \"\" : cards[cardIndex].back;\n  const [front, setFront] = useState(f);\n  const [back, setBack] = useState(b);\n\n  const addCard = () => {\n    if (front === \"\" || back === \"\") return;\n    const newCard = { front, back, lastSeenAt: new Date(), count: 0 };\n    var newCards;\n    if (cardIndex === undefined) {\n      newCards = [...cards, newCard];\n    } else {\n      newCards = [...cards];\n      newCards[cardIndex] = newCard;\n    }\n    localStorage.setItem(\"lpfaucon.flashcards.cards\", JSON.stringify(newCards));\n    toggleConfig();\n    setCards(newCards);\n    if (cardIndex === undefined) setCardIndex(newCards.length - 1);\n  };\n\n  const mem = Object.keys(localStorage)\n    .map(k => localStorage[k].length)\n    .reduce((a, b) => a + b, 0);\n\n  return (\n    <div id=\"config\">\n      {cards.length === 0 && <Instructions />}\n      <span>Front:</span>\n      <textarea value={front} onChange={e => setFront(e.target.value)} />\n      <span>Back:</span>\n      <textarea value={back} onChange={e => setBack(e.target.value)} />\n      <button\n        className=\"button\"\n        style={{ marginTop: \"16px\" }}\n        onClick={addCard}\n      >\n        {cardIndex === undefined ? \"ADD\" : \"SAVE\"}\n      </button>\n      <div className=\"separator\" />\n      <p>Memory used {(mem / 512).toFixed(2)} KB</p>\n    </div>\n  );\n};\n\nconst Instructions = () => {\n  return (\n    <div>\n      <span>\n        Welcome to Flashcards app. To start using the app the only thing you\n        need to do is adding a card by writing down below what should appear at\n        the front and at the back of it. Later on you can add more cards by\n        clicking the <i className=\"fas fa-plus\" /> on top of the screen.\n      </span>\n      <div className=\"separator\" />\n    </div>\n  );\n};\n\nconst App = () => {\n  const [cards, setCards] = useState(getCards());\n  const [cardIndex, setCardIndex] = useState(undefined);\n  const [turned, setTurned] = useState(false);\n  const [configOpen, setConfigOpen] = useState(!cards || cards.length === 0);\n\n  const next = withDelay => {\n    setCardIndex(undefined);\n    setTurned(false);\n\n    const newCardIndex = cards.reduce((_max, c, idx) => {\n      const { lastSeenAt, count } = c;\n      const { lastSeenAt: da, count: co } = cards[_max];\n      const better = importance(lastSeenAt, count) > importance(da, co);\n      return better ? idx : _max;\n    }, 0);\n    setTimeout(() => setCardIndex(newCardIndex), withDelay ? 350 : 1);\n  };\n\n  const handleRecall = wasCorrect => {\n    const newCards = [...cards];\n    if (!newCards[cardIndex]) return;\n    const { lastSeenAt, count } = newCards[cardIndex];\n    newCards[cardIndex].lastSeenAt = new Date();\n    if (wasCorrect) {\n      const im = importance(lastSeenAt, count);\n      const increment = im > THRESHOLD ? 1 : im / THRESHOLD;\n      newCards[cardIndex].count = (newCards[cardIndex].count || 0) + increment;\n    } else {\n      newCards[cardIndex].count = 0;\n    }\n    localStorage.setItem(\"lpfaucon.flashcards.cards\", JSON.stringify(newCards));\n    setCards(newCards);\n  };\n\n  const turn = () => setTurned(!turned);\n  const toggleConfig = () => setConfigOpen(!configOpen);\n\n  return (\n    <div className=\"App\">\n      <Header\n        openConfig={toggleConfig}\n        cards={cards}\n        setCardIndex={setCardIndex}\n      />\n      {!configOpen && (\n        <FlashCard\n          turned={turned}\n          turn={turn}\n          card={cards && cards[cardIndex]}\n          toggleConfig={toggleConfig}\n        />\n      )}\n      {!configOpen && (\n        <Controls\n          turned={turned}\n          cards={cards}\n          cardIndex={cardIndex}\n          turn={turn}\n          next={next}\n          answer={handleRecall}\n        />\n      )}\n      {configOpen && (\n        <ConfigPanel\n          cards={cards}\n          cardIndex={cardIndex}\n          setCardIndex={setCardIndex}\n          toggleConfig={toggleConfig}\n          setCards={setCards}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}