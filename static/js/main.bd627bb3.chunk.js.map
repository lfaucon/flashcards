{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["importance","date","count","x","Date","Math","pow","Number","isNaN","Controls","_ref","turned","turn","next","answer","cards","cardIndex","length","react_default","a","createElement","id","className","onClick","style","backgroundColor","FlashCard","_ref2","card","_ref3","front","back","_ref4","Object","slicedToArray","Header","_ref5","openConfig","ConfigPanel","_ref6","toggleConfig","setCards","_useState","useState","_useState2","setFront","_useState3","_useState4","setBack","value","onChange","e","target","marginTop","newCard","lastSeenAt","newCards","concat","toConsumableArray","localStorage","setItem","JSON","stringify","App","state","configOpen","_this","setState","s","reduce","_max","c","idx","_cards$_max","da","co","setTimeout","undefined","answered","handleRecall","wasCorrect","_this$state","config","getItem","parse","_unused","getCards","floor","random","this","_this2","_this$state2","App_Header","App_FlashCard","assign","App_Controls","App_ConfigPanel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd627bb3.chunk.js","sourcesContent":["import React, { Component, useState } from \"react\";\nimport \"./App.css\";\n\nconst importance = (date, count) => {\n  const x = (new Date() - new Date(date)) / 1.5 ** count;\n  return Number.isNaN(x) ? 1e6 : x;\n};\n\nconst Controls = ({ turned, turn, next, answer, cards, cardIndex }) => {\n  if (!cards || cards.length === 0) {\n    return (\n      <div id=\"controls\">\n        <button className=\"button\">You have no card yet</button>\n      </div>\n    );\n  }\n  return (\n    <div id=\"controls\">\n      {!turned && (\n        <button className=\"button\" onClick={turn}>\n          SHOW\n        </button>\n      )}\n      {turned && (\n        <button\n          className=\"button\"\n          style={{ backgroundColor: \"green\" }}\n          onClick={() => answer(true) || next()}\n        >\n          I KNEW\n        </button>\n      )}\n      {turned && (\n        <button\n          className=\"button\"\n          style={{ backgroundColor: \"red\" }}\n          onClick={() => answer(false) || next()}\n        >\n          I FORGOT\n        </button>\n      )}\n    </div>\n  );\n};\n\nconst FlashCard = ({ turned, card }) => {\n  const [front, back] = (card && [card.front, card.back]) || [\"\", \"\"];\n  return (\n    <div id=\"flashcard\">\n      <div className={turned ? \"showFront\" : \"showBack\"}>\n        <div className=\"front\">\n          <span>{front}</span>\n        </div>\n        <div className=\"back\">\n          <span>{back}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Header = ({ openConfig }) => (\n  <div id=\"header\">\n    <span>Flashcards</span>\n    <i className=\"fas fa-plus\" onClick={openConfig} />\n  </div>\n);\n\nconst getCards = config => {\n  try {\n    const cards = localStorage.getItem(\"lpfaucon.flashcards.cards\");\n    return cards ? JSON.parse(cards) : [];\n  } catch {\n    return [];\n  }\n};\n\nconst ConfigPanel = ({ toggleConfig, cards, setCards }) => {\n  const [front, setFront] = useState(\"\");\n  const [back, setBack] = useState(\"\");\n\n  const addCard = () => {\n    if (front === \"\" || back === \"\") return;\n    const newCard = { front, back, lastSeenAt: new Date(), count: 1 };\n    const newCards = [...cards, newCard];\n    localStorage.setItem(\"lpfaucon.flashcards.cards\", JSON.stringify(newCards));\n    toggleConfig();\n    setCards(newCards);\n  };\n\n  return (\n    <div id=\"config\">\n      <span>Front:</span>\n      <textarea value={front} onChange={e => setFront(e.target.value)} />\n      <span>Back:</span>\n      <textarea value={back} onChange={e => setBack(e.target.value)} />\n      <button\n        className=\"button\"\n        style={{ marginTop: \"16px\" }}\n        onClick={addCard}\n      >\n        ADD\n      </button>\n    </div>\n  );\n};\n\nclass App extends Component {\n  state = {\n    turned: false,\n    configOpen: false\n  };\n\n  componentDidMount() {\n    const cards = getCards();\n    const cardIndex = Math.floor(Math.random() * cards.length);\n    this.setState({ cards, cardIndex });\n  }\n\n  next = () =>\n    this.setState(s => {\n      const { cards } = s;\n      const cardIndex = cards.reduce((_max, c, idx) => {\n        const { lastSeenAt, count } = c;\n        const { lastSeenAt: da, count: co } = cards[_max];\n        const better = importance(lastSeenAt, count) > importance(da, co);\n        return better ? idx : _max;\n      }, 0);\n      setTimeout(() => this.setState({ cardIndex }), 500);\n      return {\n        turned: false,\n        cardIndex: undefined,\n        answered: false\n      };\n    });\n\n  handleRecall = wasCorrect => {\n    const { cards, cardIndex } = this.state;\n    const newCards = [...cards];\n    newCards[cardIndex].lastSeenAt = new Date();\n    if (wasCorrect) {\n      newCards[cardIndex].count = (newCards[cardIndex].count || 1) + 1;\n    } else {\n      newCards[cardIndex].count = 1;\n    }\n    localStorage.setItem(\"lpfaucon.flashcards.cards\", JSON.stringify(newCards));\n    this.setState({ cards: newCards });\n  };\n\n  turn = () => this.setState(s => ({ turned: !s.turned }));\n  toggleConfig = () => this.setState(s => ({ configOpen: !s.configOpen }));\n\n  render() {\n    const { configOpen, cards, cardIndex } = this.state;\n    return (\n      <div className=\"App\">\n        <Header openConfig={this.toggleConfig} />\n        {!configOpen && (\n          <FlashCard {...this.state} card={cards && cards[cardIndex]} />\n        )}\n        {!configOpen && (\n          <Controls\n            {...this.state}\n            turn={this.turn}\n            next={this.next}\n            answer={this.handleRecall}\n          />\n        )}\n        {configOpen && (\n          <ConfigPanel\n            {...this.state}\n            toggleConfig={this.toggleConfig}\n            setCards={c => this.setState({ cards: c })}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}