{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Controls","_ref","turned","turn","next","answer","cards","length","react_default","a","createElement","id","className","onClick","style","backgroundColor","FlashCard","_ref2","card","front","back","Header","_ref3","openConfig","ConfigPanel","_ref4","toggleConfig","_useState","useState","_useState2","Object","slicedToArray","setFront","_useState3","_useState4","setBack","value","onChange","e","target","marginTop","newCard","newCards","concat","toConsumableArray","localStorage","setItem","JSON","stringify","App","state","configOpen","_this","setState","s","randIndex","Math","floor","random","setTimeout","undefined","answered","config","getItem","parse","_unused","getCards","this","App_Header","App_FlashCard","App_Controls","assign","wasCorrect","App_ConfigPanel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc80a9f3.chunk.js","sourcesContent":["import React, { Component, useState } from \"react\";\nimport \"./App.css\";\n\nconst Controls = ({ turned, turn, next, answer, cards }) => {\n  if (!cards || cards.length === 0) {\n    return (\n      <div id=\"controls\">\n        <button className=\"button\">You have no card yet</button>\n      </div>\n    );\n  }\n  return (\n    <div id=\"controls\">\n      {!turned && (\n        <button className=\"button\" onClick={turn}>\n          SHOW\n        </button>\n      )}\n      {turned && (\n        <button\n          className=\"button\"\n          style={{ backgroundColor: \"green\" }}\n          onClick={() => answer(true) || next()}\n        >\n          I KNEW\n        </button>\n      )}\n      {turned && (\n        <button\n          className=\"button\"\n          style={{ backgroundColor: \"red\" }}\n          onClick={() => answer(false) || next()}\n        >\n          I FORGOT\n        </button>\n      )}\n    </div>\n  );\n};\n\nconst FlashCard = ({ turned, card }) => (\n  <div id=\"flashcard\">\n    <div className={turned ? \"showFront\" : \"showBack\"}>\n      <div className=\"front\">\n        <span>{card && card.front}</span>\n      </div>\n      <div className=\"back\">\n        <span>{card && card.back}</span>\n      </div>\n    </div>\n  </div>\n);\n\nconst Header = ({ openConfig }) => (\n  <div id=\"header\">\n    <span>Flashcards</span>\n    <i className=\"fas fa-plus\" onClick={openConfig} />\n  </div>\n);\n\nconst getCards = config => {\n  try {\n    const cards = localStorage.getItem(\"lpfaucon.flashcards.cards\");\n    return cards ? JSON.parse(cards) : [];\n  } catch {\n    return [];\n  }\n};\n\nconst ConfigPanel = ({ toggleConfig, cards }) => {\n  const [front, setFront] = useState(\"\");\n  const [back, setBack] = useState(\"\");\n\n  const addCard = () => {\n    if (front === \"\" || back === \"\") return;\n    const newCard = { front, back };\n    const newCards = [...cards, newCard];\n    localStorage.setItem(\"lpfaucon.flashcards.cards\", JSON.stringify(newCards));\n    toggleConfig();\n  };\n  return (\n    <div id=\"config\">\n      <span>Front:</span>\n      <textarea value={front} onChange={e => setFront(e.target.value)} />\n      <span>Back:</span>\n      <textarea value={back} onChange={e => setBack(e.target.value)} />\n      <button\n        className=\"button\"\n        style={{ marginTop: \"16px\" }}\n        onClick={addCard}\n      >\n        ADD\n      </button>\n    </div>\n  );\n};\n\nclass App extends Component {\n  state = {\n    turned: false,\n    configOpen: false\n  };\n\n  componentDidMount() {\n    const cards = getCards();\n    const randIndex = Math.floor(Math.random() * cards.length);\n    this.setState({\n      cards,\n      card: cards[randIndex]\n    });\n  }\n\n  next = () =>\n    this.setState(s => {\n      const randIndex = Math.floor(Math.random() * s.cards.length);\n      setTimeout(() => this.setState({ card: s.cards[randIndex] }), 500);\n      return {\n        turned: false,\n        card: undefined,\n        answered: false\n      };\n    });\n\n  turn = () => this.setState(s => ({ turned: !s.turned }));\n  toggleConfig = () => this.setState(s => ({ configOpen: !s.configOpen }));\n\n  render() {\n    const { configOpen } = this.state;\n    return (\n      <div className=\"App\">\n        <Header openConfig={this.toggleConfig} />\n        {!configOpen && <FlashCard {...this.state} />}\n        {!configOpen && (\n          <Controls\n            {...this.state}\n            turn={this.turn}\n            next={this.next}\n            answer={wasCorrect => {}}\n          />\n        )}\n        {configOpen && (\n          <ConfigPanel {...this.state} toggleConfig={this.toggleConfig} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}