{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["importance","date","count","x","Date","Math","pow","Number","isNaN","Controls","_ref","turned","turn","next","answer","cards","cardIndex","length","undefined","react_default","a","createElement","id","className","onClick","style","backgroundColor","FlashCard","_ref2","card","toggleConfig","_ref3","front","back","_ref4","Object","slicedToArray","_ref5","lastSeenAt","getSeconds","_ref6","f","b","latex_default","MemoryBattery","_ref7","memoryScore","reduce","_max","c","idx","max","icon","Header","_ref8","openConfig","setCardIndex","App_MemoryBattery","ConfigPanel","_ref9","setCards","_useState","useState","_useState2","setFront","_useState3","_useState4","setBack","mem","keys","localStorage","map","k","value","onChange","e","target","marginTop","newCards","newCard","concat","toConsumableArray","setItem","JSON","stringify","toFixed","App","_useState5","config","getItem","parse","_unused","getCards","_useState6","_idx","floor","random","_useState7","_useState8","_useState9","_useState10","setTurned","_useState11","_useState12","configOpen","setConfigOpen","App_Header","App_FlashCard","App_Controls","newCardIndex","_cards$_max","da","co","setTimeout","wasCorrect","_newCards$cardIndex","increment","App_ConfigPanel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca6b2612.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Latex from \"react-latex\";\nimport \"./App.css\";\n\nconst THRESHOLD = 3 * 3600 * 1000; // 12 hours threshold\n\nconst importance = (date, count) => {\n  const x = (new Date() - new Date(date)) / 2 ** count;\n  return Number.isNaN(x) ? 1e6 : x;\n};\n\nconst Controls = ({ turned, turn, next, answer, cards, cardIndex }) => {\n  if (!cards || cards.length === 0) return null;\n  if (cardIndex === undefined) next();\n  return (\n    <div id=\"controls\">\n      {!turned && (\n        <button className=\"button\" onClick={turn}>\n          SHOW\n        </button>\n      )}\n      {turned && (\n        <button\n          className=\"button\"\n          style={{ backgroundColor: \"green\" }}\n          onClick={() => answer(true) || next()}\n        >\n          I KNEW\n        </button>\n      )}\n      {turned && (\n        <button\n          className=\"button\"\n          style={{ backgroundColor: \"red\" }}\n          onClick={() => answer(false) || next()}\n        >\n          I FORGOT\n        </button>\n      )}\n    </div>\n  );\n};\n\nconst FlashCard = ({ turned, turn, card, toggleConfig }) => {\n  const [front, back] = (card && [card.front, card.back]) || [\"\", \"\"];\n  const reverse = card && new Date(card.lastSeenAt).getSeconds() % 2 > 0.5;\n  const [f, b] = reverse ? [front, back] : [back, front];\n  return (\n    <div id=\"flashcard\" onClick={turn}>\n      <div className={turned ? \"showFront\" : \"showBack\"}>\n        <div className=\"front\">\n          <i className=\"edit-button fas fa-pencil-alt\" onClick={toggleConfig} />\n          <Latex>{f}</Latex>\n        </div>\n        <div className=\"back\">\n          <i className=\"edit-button fas fa-pencil-alt\" onClick={toggleConfig} />\n          <Latex>{b}</Latex>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst MemoryBattery = ({ cards }) => {\n  const memoryScore = cards\n    ? cards.reduce(\n        (_max, c, idx) => Math.max(importance(c.lastSeenAt, c.count), _max),\n        0\n      )\n    : 0;\n  var icon = \"fas fa-battery-full\";\n  if (memoryScore > 1 * THRESHOLD) icon = \"fas fa-battery-three-quarters\";\n  if (memoryScore > 2 * THRESHOLD) icon = \"fas fa-battery-half\";\n  if (memoryScore > 3 * THRESHOLD) icon = \"fas fa-battery-quarter\";\n  if (memoryScore > 4 * THRESHOLD) icon = \"fas fa-battery-empty\";\n  return <i className={icon} />;\n};\n\nconst Header = ({ openConfig, cards, setCardIndex }) => {\n  return (\n    <div id=\"header\">\n      <span>Flashcards</span>\n      <MemoryBattery cards={cards} />\n      <i\n        className=\"fas fa-plus\"\n        onClick={() => openConfig() || setCardIndex(undefined)}\n      />\n    </div>\n  );\n};\n\nconst getCards = config => {\n  try {\n    const cards = localStorage.getItem(\"lpfaucon.flashcards.cards\");\n    return cards ? JSON.parse(cards) : [];\n  } catch {\n    return [];\n  }\n};\n\nconst ConfigPanel = ({\n  toggleConfig,\n  setCardIndex,\n  cardIndex,\n  cards,\n  setCards\n}) => {\n  const f = cardIndex === undefined ? \"\" : cards[cardIndex].front;\n  const b = cardIndex === undefined ? \"\" : cards[cardIndex].back;\n  const [front, setFront] = useState(f);\n  const [back, setBack] = useState(b);\n\n  const addCard = () => {\n    if (front === \"\" || back === \"\") return;\n    const newCard = { front, back, lastSeenAt: new Date(), count: 0 };\n    var newCards;\n    if (cardIndex === undefined) {\n      newCards = [...cards, newCard];\n    } else {\n      newCards = [...cards];\n      newCards[cardIndex] = newCard;\n    }\n    localStorage.setItem(\"lpfaucon.flashcards.cards\", JSON.stringify(newCards));\n    toggleConfig();\n    setCards(newCards);\n    if (cardIndex === undefined) setCardIndex(newCards.length - 1);\n  };\n\n  const mem = Object.keys(localStorage)\n    .map(k => localStorage[k].length)\n    .reduce((a, b) => a + b, 0);\n\n  return (\n    <div id=\"config\">\n      <span>Front:</span>\n      <textarea value={front} onChange={e => setFront(e.target.value)} />\n      <span>Back:</span>\n      <textarea value={back} onChange={e => setBack(e.target.value)} />\n      <button\n        className=\"button\"\n        style={{ marginTop: \"16px\" }}\n        onClick={addCard}\n      >\n        {cardIndex === undefined ? \"ADD\" : \"SAVE\"}\n      </button>\n      <div className=\"separator\" />\n      <span>Memory used {(mem / 512).toFixed(2)} KB</span>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [cards, setCards] = useState(getCards());\n  const _idx =\n    cards && cards.length > 0\n      ? Math.floor(Math.random() * cards.length)\n      : undefined;\n  const [cardIndex, setCardIndex] = useState(_idx);\n  const [turned, setTurned] = useState(false);\n  const [configOpen, setConfigOpen] = useState(!cards || cards.length === 0);\n\n  const next = () => {\n    setCardIndex(undefined);\n    setTurned(false);\n\n    const newCardIndex = cards.reduce((_max, c, idx) => {\n      const { lastSeenAt, count } = c;\n      const { lastSeenAt: da, count: co } = cards[_max];\n      const better = importance(lastSeenAt, count) > importance(da, co);\n      return better ? idx : _max;\n    }, 0);\n    setTimeout(() => setCardIndex(newCardIndex), 350);\n  };\n\n  const handleRecall = wasCorrect => {\n    const newCards = [...cards];\n    if (!newCards[cardIndex]) return;\n    const { lastSeenAt, count } = newCards[cardIndex];\n    newCards[cardIndex].lastSeenAt = new Date();\n    if (wasCorrect) {\n      const increment = importance(lastSeenAt, count) > THRESHOLD ? 1 : 0;\n      newCards[cardIndex].count = (newCards[cardIndex].count || 0) + increment;\n    } else {\n      newCards[cardIndex].count = 0;\n    }\n    localStorage.setItem(\"lpfaucon.flashcards.cards\", JSON.stringify(newCards));\n    setCards(newCards);\n  };\n\n  const turn = () => setTurned(!turned);\n  const toggleConfig = () => setConfigOpen(!configOpen);\n\n  return (\n    <div className=\"App\">\n      <Header\n        openConfig={toggleConfig}\n        cards={cards}\n        setCardIndex={setCardIndex}\n      />\n      {!configOpen && (\n        <FlashCard\n          turned={turned}\n          turn={turn}\n          card={cards && cards[cardIndex]}\n          toggleConfig={toggleConfig}\n        />\n      )}\n      {!configOpen && (\n        <Controls\n          turned={turned}\n          cards={cards}\n          cardIndex={cardIndex}\n          turn={turn}\n          next={next}\n          answer={handleRecall}\n        />\n      )}\n      {configOpen && (\n        <ConfigPanel\n          cards={cards}\n          cardIndex={cardIndex}\n          setCardIndex={setCardIndex}\n          toggleConfig={toggleConfig}\n          setCards={setCards}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}